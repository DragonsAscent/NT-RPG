public class DamageBonus extends EffectBase {
    public static final String name = "BonusDamage";
    float bonusDamage;

    public DamageBonus(IEffectConsumer consumer, long duration, float bonusDamage) {
        super(name, consumer);
        setDuration(duration);
        setBonusDamage(bonusDamage);
    }

    public float getBonusDamage() {
        return bonusDamage;
    }

    public void setBonusDamage(float bonusDamage) {
        this.bonusDamage = bonusDamage;
    }

    @Override
    public void onApply() {
        super.onApply();
        IActiveCharacter character = (IActiveCharacter) getConsumer();
        character.setCharacterProperty(DefaultProperties.weapon_damage_bonus,
        character.getCharacterProperty(DefaultProperties.weapon_damage_bonus) + getBonusDamage());
        getGlobalScope().damageService.recalculateCharacterWeaponDamage(character);
    }

    @Override
    public void onRemove() {
        super.onRemove();
        IActiveCharacter character = (IActiveCharacter) getConsumer();
        character.setCharacterProperty(DefaultProperties.weapon_damage_bonus,
        character.getCharacterProperty(DefaultProperties.weapon_damage_bonus) - getBonusDamage());
        getGlobalScope().damageService.recalculateCharacterWeaponDamage(character);
    }
}


IActiveCharacter entity = ...
DamageBonus damagebonu = new DamageBonus(entity, 10L, 10f);
effectService.addEffect(damagebonu, entity)